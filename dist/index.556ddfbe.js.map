{"mappings":"AAKA,MAAMA,EAASC,SAASC,eAAe,UACjCC,EAAMH,EAAOI,WAAW,KAAM,CAClCC,oBAAoB,IAEhBC,EAAIN,EAAOO,MACXC,EAAIR,EAAOS,OAEjBC,QAAQC,IAAI,UAAWL,GACvBI,QAAQC,IAAI,WAAYH,GAExB,IAAII,EAAO,GACX,MAAMC,EAAY,CAAEC,EAAG,EAAGC,EAAG,GAE7B,IAAIC,GAAU,EA8Bd,SAASC,IACPD,GAAU,CACZ,CAiDA,SAASE,IAEP,MAAMC,EAAWhB,EAAIiB,aAAa,EAAG,EAAGd,EAAGE,GAAGa,KAE9C,IAAIC,EAAK,EACLC,EAAK,EACLC,EAAI,EACR,IAAK,IAAIC,EAAI,EAAGA,EAAInB,EAAGmB,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAGkB,IACiB,IAAlCP,EAAS,GAAKM,EAAInB,EAAIoB,GAAK,KAC7BJ,GAAMG,EACNF,GAAMG,EACNF,GAAK,GAQX,MAAO,CAAEV,EAJEQ,EAAKE,EAIAT,EAHLQ,EAAKC,EAIlB,CApGAxB,EAAO2B,iBAAiB,eAKxB,SAAiBC,GAGf,GAFAA,EAAEC,iBACFD,EAAEE,kBACEd,EAAS,EAERH,EAAUC,EAAIc,EAAEG,UAAYlB,EAAUC,EAAIc,EAAEG,UAC5ClB,EAAUE,EAAIa,EAAEI,UAAYnB,EAAUE,EAAIa,EAAEI,SACvCC,IACNpB,EAAUC,EAAIc,EAAEG,QAChBlB,EAAUE,EAAIa,EAAEI,QAChBpB,EAAKsB,KAAK,CAAEpB,EAAGD,EAAUC,EAAGC,EAAGF,EAAUE,IAiB/C,WACEZ,EAAIgC,UAAU,EAAG,EAAG7B,EAAGE,GACvBL,EAAIiC,YACJjC,EAAIkC,OAAOzB,EAAK,GAAGE,EAAGF,EAAK,GAAGG,GAC9B,IAAK,IAAIU,EAAI,EAAGA,EAAIb,EAAK0B,OAAQb,IAC/BtB,EAAIoC,OAAO3B,EAAKa,GAAGX,EAAGF,EAAKa,GAAGV,GAEhCZ,EAAIqC,YAAc,QAClBrC,EAAIsC,UAAY,EAChBtC,EAAIuC,UAAY,YAChBvC,EAAIwC,KAAK,WACTxC,EAAIyC,YACJzC,EAAI0C,SAGJ,MAAMC,EAAI5B,IAEVf,EAAIiC,YACJjC,EAAI4C,IAAID,EAAEhC,EAAGgC,EAAE/B,EAAG,EAAG,EAAG,EAAIiC,KAAKC,IAAI,GACrC9C,EAAIuC,UAAY,MAChBvC,EAAIwC,OACJxC,EAAI0C,QACN,CAtCMK,GAEJ,CACF,IAlBAlD,EAAO2B,iBAAiB,eAoBxB,SAAqBC,GACnBA,EAAEC,iBACFD,EAAEE,kBACFlB,EAAO,GACPI,GAAU,CACZ,IAxBAhB,EAAO2B,iBAAiB,YAAaV,GACrCjB,EAAO2B,iBAAiB,aAAcV,GA4GtCkC,OAAOC,KAAOxC,EACduC,OAAOE,QAAUnC","sources":["src/ts/main.ts"],"sourcesContent":["interface Point {\n  x: number;\n  y: number;\n}\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d', {\n  willReadFrequently: true,\n}) as CanvasRenderingContext2D;\nconst w = canvas.width;\nconst h = canvas.height;\n\nconsole.log('width: ', w);\nconsole.log('height: ', h);\n\nlet path = [] as Point[];\nconst lastPoint = { x: 0, y: 0 };\nconst stickLength = 1;\nlet drawing = false;\n\ncanvas.addEventListener('pointermove', dragged);\ncanvas.addEventListener('pointerdown', pointedDown);\ncanvas.addEventListener('pointerup', pointedUp);\ncanvas.addEventListener('pointerout', pointedUp);\n\nfunction dragged(e: PointerEvent): void {\n  e.preventDefault();\n  e.stopPropagation();\n  if (drawing) {\n    const d =\n      (lastPoint.x - e.offsetX) * (lastPoint.x - e.offsetX) +\n      (lastPoint.y - e.offsetY) * (lastPoint.y - e.offsetY);\n    if (d > stickLength * stickLength) {\n      lastPoint.x = e.offsetX;\n      lastPoint.y = e.offsetY;\n      path.push({ x: lastPoint.x, y: lastPoint.y });\n      draw();\n    }\n  }\n}\n\nfunction pointedDown(e: PointerEvent) {\n  e.preventDefault();\n  e.stopPropagation();\n  path = [];\n  drawing = true;\n}\n\nfunction pointedUp() {\n  drawing = false;\n}\n\nfunction draw() {\n  ctx.clearRect(0, 0, w, h);\n  ctx.beginPath();\n  ctx.moveTo(path[0].x, path[0].y);\n  for (let i = 1; i < path.length; i++) {\n    ctx.lineTo(path[i].x, path[i].y);\n  }\n  ctx.strokeStyle = 'black';\n  ctx.lineWidth = 2;\n  ctx.fillStyle = 'lightblue';\n  ctx.fill('evenodd');\n  ctx.closePath();\n  ctx.stroke();\n\n  //   const B = barycenter(path);\n  const B = barycenterBySurface();\n\n  ctx.beginPath();\n  ctx.arc(B.x, B.y, 5, 0, 2 * Math.PI, false);\n  ctx.fillStyle = 'red';\n  ctx.fill();\n  ctx.stroke();\n}\n\nfunction barycenter(P: Point[]): Point {\n  const N = P.length;\n  let SX = 0;\n  let SY = 0;\n  let SA = 0;\n  for (let i = 0; i < N; i++) {\n    SX +=\n      (P[i].x + P[(i + 1) % N].x) *\n      (P[i].x * P[(i + 1) % N].y - P[(i + 1) % N].x * P[i].y);\n    SY +=\n      (P[i].y + P[(i + 1) % N].y) *\n      (P[i].x * P[(i + 1) % N].y - P[(i + 1) % N].x * P[i].y);\n    SA += P[i].x * P[(i + 1) % N].y - P[(i + 1) % N].x * P[i].y;\n  }\n  const A = (1 / 2) * SA;\n  const Cx = (1 / (6 * A)) * SX;\n  const Cy = (1 / (6 * A)) * SY;\n\n  //   console.log(`barycenter: (${Cx},${Cy})`);\n  //   console.log(`area: ${A}`);\n  return { x: Cx, y: Cy };\n}\n\nfunction barycenterBySurface(): Point {\n  //context: CanvasRenderingContext2D\n  const imgArray = ctx.getImageData(0, 0, w, h).data;\n\n  let SX = 0;\n  let SY = 0;\n  let N = 0;\n  for (let i = 0; i < w; i++) {\n    for (let j = 0; j < h; j++) {\n      if (imgArray[4 * (i + w * j) + 3] !== 0) {\n        SX += i;\n        SY += j;\n        N += 1;\n      }\n    }\n  }\n  const Cx = SX / N;\n  const Cy = SY / N;\n  //   console.log(`barycenterSurf: (${Cx},${Cy})`);\n\n  return { x: Cx, y: Cy };\n}\n\nexport {};\n\ndeclare global {\n  interface Window {\n    path: Point[];\n    barySur: () => Point;\n  }\n}\n\nwindow.path = path;\nwindow.barySur = barycenterBySurface;\n"],"names":["$e366f2c43bf887ab$var$canvas","document","getElementById","$e366f2c43bf887ab$var$ctx","getContext","willReadFrequently","$e366f2c43bf887ab$var$w","width","$e366f2c43bf887ab$var$h","height","console","log","$e366f2c43bf887ab$var$path","$e366f2c43bf887ab$var$lastPoint","x","y","$e366f2c43bf887ab$var$drawing","$e366f2c43bf887ab$var$pointedUp","$e366f2c43bf887ab$var$barycenterBySurface","imgArray","getImageData","data","SX","SY","N","i","j","addEventListener","e","preventDefault","stopPropagation","offsetX","offsetY","$e366f2c43bf887ab$var$stickLength","push","clearRect","beginPath","moveTo","length","lineTo","strokeStyle","lineWidth","fillStyle","fill","closePath","stroke","B","arc","Math","PI","$e366f2c43bf887ab$var$draw","window","path","barySur"],"version":3,"file":"index.556ddfbe.js.map"}