{"mappings":"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","sources":["<anon>","src/ts/main.ts","node_modules/document-ready/index.js","src/ts/modeDraw-old.ts","src/ts/mathHelpers.ts","src/ts/barycenter.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a4c08666819fb319$exports = {};\n\"use strict\";\n$a4c08666819fb319$exports = $a4c08666819fb319$var$ready;\nfunction $a4c08666819fb319$var$ready(callback) {\n    if (typeof document === \"undefined\") throw new Error(\"document-ready only runs in the browser\");\n    var state = document.readyState;\n    if (state === \"complete\" || state === \"interactive\") return setTimeout(callback, 0);\n    document.addEventListener(\"DOMContentLoaded\", function onLoad() {\n        callback();\n    });\n}\n\n\nconst $aae5c5ac5df842ce$export$1717f45d0ace7417 = (ptA, ptB)=>(ptA.x - ptB.x) * (ptA.x - ptB.x) + (ptA.y - ptB.y) * (ptA.y - ptB.y);\nconst $aae5c5ac5df842ce$export$6c4a311cc157c764 = (ptA, ptB)=>Math.sqrt($aae5c5ac5df842ce$export$1717f45d0ace7417(ptA, ptB));\n// Linear interpolation between x and y.\nconst $aae5c5ac5df842ce$export$3a89f8d6f6bf6c9f = (x, y, t)=>(1 - t) * x + t * y;\nconst $aae5c5ac5df842ce$export$c45b79d581bbb999 = (x, y, p)=>{\n    if (Math.abs(y - x) !== 0) return Math.min(1, Math.max(0, Math.abs(p - x) / Math.abs(y - x)));\n    else return 0;\n};\nconst $aae5c5ac5df842ce$export$1544d9bc2995de08 = (u, v, t)=>{\n    const angle = Math.acos(u.x * v.x + u.y * v.y);\n    if (angle < 0.1) return u;\n    else return {\n        x: (Math.sin((1 - t) * angle) * u.x + Math.sin(t * angle) * v.x) / Math.sin(angle),\n        y: (Math.sin((1 - t) * angle) * u.y + Math.sin(t * angle) * v.y) / Math.sin(angle)\n    };\n};\n// Clamps x between the values a and b.\nconst $aae5c5ac5df842ce$export$7d15b64cf5a3a4c4 = (x, a, b)=>a <= b ? Math.min(Math.max(x, a), b) : Math.min(Math.max(x, b), a);\n\n\nfunction $ce69b712342be4e9$export$b8dee192426ab0a1(P) {\n    const N = P.length;\n    let SX = 0;\n    let SY = 0;\n    let SA = 0;\n    for(let i = 0; i < N; i++){\n        SX += (P[i].x + P[(i + 1) % N].x) * (P[i].x * P[(i + 1) % N].y - P[(i + 1) % N].x * P[i].y);\n        SY += (P[i].y + P[(i + 1) % N].y) * (P[i].x * P[(i + 1) % N].y - P[(i + 1) % N].x * P[i].y);\n        SA += P[i].x * P[(i + 1) % N].y - P[(i + 1) % N].x * P[i].y;\n    }\n    const A = 0.5 * SA;\n    const Cx = 1 / (6 * A) * SX;\n    const Cy = 1 / (6 * A) * SY;\n    //   console.log(`barycenter: (${Cx},${Cy})`);\n    //   console.log(`area: ${A}`);\n    return {\n        x: Cx,\n        y: Cy\n    };\n}\nfunction $ce69b712342be4e9$export$694614eb4b58a2ae(ctx) {\n    //context: CanvasRenderingContext2D\n    const w = ctx.canvas.width;\n    const h = ctx.canvas.height;\n    const imgArray = ctx.getImageData(0, 0, w, h).data;\n    let SX = 0;\n    let SY = 0;\n    let N = 0;\n    for(let i = 0; i < w; i++){\n        for(let j = 0; j < h; j++)if (imgArray[4 * (i + w * j) + 3] !== 0) {\n            SX += i;\n            SY += j;\n            N += 1;\n        }\n    }\n    const Cx = SX / N;\n    const Cy = SY / N;\n    //   console.log(`barycenterSurf: (${Cx},${Cy})`);\n    // console.log(`area: ${N}`);\n    return {\n        center: {\n            x: Cx,\n            y: Cy\n        },\n        area: N\n    };\n}\nconst $ce69b712342be4e9$export$965b4a65e3475b20 = (layers)=>{\n    const neLayers = layers.filter((d)=>d.layer?.path.data.length > 1); // non-empty layers\n    const totalArea = neLayers.map((d)=>d.layer?.area).reduce((acc, curr)=>acc + curr, 0);\n    const X = neLayers.map((d)=>d.layer?.barycenter.x * d.layer?.area).reduce((acc, curr)=>acc + curr, 0) / totalArea;\n    const Y = neLayers.map((d)=>d.layer?.barycenter.y * d.layer?.area).reduce((acc, curr)=>acc + curr, 0) / totalArea;\n    return {\n        x: X,\n        y: Y\n    };\n};\nconst $ce69b712342be4e9$export$e3058993d827ff4e = (layers, targetLayer)=>{\n    const neLayers = layers.filter((d)=>d.layer?.path.data.length > 1); // non-empty layers\n    targetLayer.clear();\n    if (neLayers.length > 0) {\n        const C = $ce69b712342be4e9$export$965b4a65e3475b20(neLayers);\n        targetLayer.barycenter = C;\n        targetLayer.drawBarycenter();\n    }\n};\n\n\nclass $ea581e40972ccb3c$export$2e2bcd8739ae039 {\n    constructor(ctx, path){\n        this.drawing = false;\n        this.color = \"lightblue\";\n        this.lastPoint = {\n            x: 0,\n            y: 0\n        };\n        this.stickLengthSq = 0.5;\n        this.actRadiusSq = 3600 // activation radius squared\n        ;\n        this.dragged = (e)=>{\n            if (this.drawing && e.isPrimary) {\n                const d = (0, $aae5c5ac5df842ce$export$1717f45d0ace7417)(this.lastPoint, {\n                    x: e.offsetX,\n                    y: e.offsetY\n                });\n                if (d > this.stickLengthSq) {\n                    this.lastPoint.x = e.offsetX;\n                    this.lastPoint.y = e.offsetY;\n                    this.path.push({\n                        x: this.lastPoint.x,\n                        y: this.lastPoint.y\n                    });\n                    this.draw();\n                }\n            }\n        };\n        this.pointedDown = (e)=>{\n            if (e.isPrimary) {\n                const d = (0, $aae5c5ac5df842ce$export$1717f45d0ace7417)(this.lastPoint, {\n                    x: e.offsetX,\n                    y: e.offsetY\n                });\n                if (d > this.actRadiusSq) {\n                    this.path = [];\n                    this.clear();\n                }\n                this.drawing = true;\n            }\n        };\n        this.pointedUp = ()=>{\n            this.drawing = false;\n            const iniPt = this.path[0];\n            const endPt = this.path[this.path.length - 1];\n            if ((0, $aae5c5ac5df842ce$export$1717f45d0ace7417)(iniPt, endPt) < this.actRadiusSq) {\n                this.color = \"olive\";\n                this.draw();\n                this.deactivate();\n            }\n        };\n        this.clear = ()=>{\n            this.path = [];\n            this.ctx.clearRect(0, 0, this.cnv.width, this.cnv.width);\n        };\n        this.draw = ()=>{\n            this.ctx.clearRect(0, 0, this.cnv.width, this.cnv.height);\n            this.ctx.beginPath();\n            this.ctx.moveTo(this.path[0].x, this.path[0].y);\n            for(let i = 1; i < this.path.length; i++)this.ctx.lineTo(this.path[i].x, this.path[i].y);\n            this.ctx.strokeStyle = \"black\";\n            this.ctx.lineWidth = 2;\n            this.ctx.fillStyle = this.color;\n            this.ctx.fill(\"evenodd\");\n            if (this.color === \"olive\") this.ctx.closePath();\n            this.ctx.stroke();\n            //   const B = barycenter(path);\n            const B = (0, $ce69b712342be4e9$export$694614eb4b58a2ae)(this.ctx).center;\n            this.ctx.beginPath();\n            this.ctx.arc(B.x, B.y, 5, 0, 2 * Math.PI, false);\n            this.ctx.fillStyle = \"red\";\n            this.ctx.fill();\n            this.ctx.stroke();\n        };\n        this.ctx = ctx;\n        this.cnv = ctx.canvas;\n        this.path = path;\n        this.w = this.cnv.width;\n        this.h = this.cnv.height;\n    }\n    activate() {\n        this.path = [];\n        this.color = \"lightblue\";\n        this.cnv.addEventListener(\"pointermove\", this.dragged);\n        this.cnv.addEventListener(\"pointerdown\", this.pointedDown);\n        this.cnv.addEventListener(\"pointerup\", this.pointedUp);\n        this.cnv.addEventListener(\"pointerout\", this.pointedUp);\n    }\n    deactivate() {\n        this.cnv.removeEventListener(\"pointermove\", this.dragged);\n        this.cnv.removeEventListener(\"pointerdown\", this.pointedDown);\n        this.cnv.removeEventListener(\"pointerup\", this.pointedUp);\n        this.cnv.removeEventListener(\"pointerout\", this.pointedUp);\n    }\n}\n\n\nfunction $e366f2c43bf887ab$var$main() {\n    const drawApp = document.getElementById(\"drawApp\");\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\", {\n        willReadFrequently: true\n    });\n    console.log(\"width: \", canvas.width);\n    console.log(\"height: \", canvas.height);\n    const path = [];\n    const mode = new (0, $ea581e40972ccb3c$export$2e2bcd8739ae039)(ctx, path);\n    mode.activate();\n    // window.mode = mode;\n    drawApp.addEventListener(\"fullscreenchange\", function() {\n        if (drawApp !== document.fullscreenElement) {\n            canvas.width = 800;\n            canvas.height = 800;\n        }\n    }, false);\n    document.getElementById(\"appBtn\")?.addEventListener(\"click\", ()=>{\n        const ww = screen.width;\n        const hh = screen.height;\n        canvas.width = Math.max(ww, hh);\n        canvas.height = Math.min(ww, hh);\n        drawApp.requestFullscreen().then(()=>screen.orientation.lock(\"landscape\")).then((success)=>{\n            console.log(success);\n        }, (failure)=>{\n            console.log(failure);\n        }).catch((err)=>{\n            alert(`An error occurred while trying to switch into fullscreen mode: ${err.message} (${err.name})`);\n        });\n    });\n    // window.path = path;\n    // window.barySur = barycenterBySurface;\n    document.getElementById(\"drawButton\")?.addEventListener(\"click\", ()=>{\n        mode.clear();\n        mode.activate();\n    });\n}\n(0, (/*@__PURE__*/$parcel$interopDefault($a4c08666819fb319$exports)))($e366f2c43bf887ab$var$main);\n\n\n//# sourceMappingURL=index.9c3df253.js.map\n","import ready from 'document-ready';\nimport { Point } from './barycenter';\n// import { Point, barycenterBySurface } from './barycenter';\n// import { ModeConfig } from './uiFunctions';\nimport ModeDraw from './modeDraw-old';\n\ndeclare global {\n  interface Window {\n    path: Point[];\n    barySur: (ctx: CanvasRenderingContext2D) => Point;\n  }\n}\n\nfunction main() {\n  const drawApp = document.getElementById('drawApp') as HTMLDivElement;\n  const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n\n  const ctx = canvas.getContext('2d', {\n    willReadFrequently: true,\n  }) as CanvasRenderingContext2D;\n\n  console.log('width: ', canvas.width);\n  console.log('height: ', canvas.height);\n\n  const path = [] as Point[];\n\n  const mode = new ModeDraw(ctx, path);\n  mode.activate();\n  // window.mode = mode;\n\n  drawApp.addEventListener(\n    'fullscreenchange',\n    function () {\n      if (drawApp !== document.fullscreenElement) {\n        canvas.width = 800;\n        canvas.height = 800;\n      }\n    },\n    false,\n  );\n\n  document.getElementById('appBtn')?.addEventListener('click', () => {\n    const ww = screen.width;\n    const hh = screen.height;\n    canvas.width = Math.max(ww, hh);\n    canvas.height = Math.min(ww, hh);\n    drawApp\n      .requestFullscreen()\n      .then(() => screen.orientation.lock('landscape'))\n      .then(\n        (success) => {\n          console.log(success);\n        },\n        (failure) => {\n          console.log(failure);\n        },\n      )\n      .catch((err: Error) => {\n        alert(\n          `An error occurred while trying to switch into fullscreen mode: ${err.message} (${err.name})`,\n        );\n      });\n  });\n  // window.path = path;\n  // window.barySur = barycenterBySurface;\n  document.getElementById('drawButton')?.addEventListener('click', () => {\n    mode.clear();\n    mode.activate();\n  });\n}\n\nready(main);\n","'use strict'\n\nmodule.exports = ready\n\nfunction ready (callback) {\n  if (typeof document === 'undefined') {\n    throw new Error('document-ready only runs in the browser')\n  }\n  var state = document.readyState\n  if (state === 'complete' || state === 'interactive') {\n    return setTimeout(callback, 0)\n  }\n\n  document.addEventListener('DOMContentLoaded', function onLoad () {\n    callback()\n  })\n}\n","import { Mode } from './uiFunctions';\nimport { Point, distSq } from './mathHelpers';\nimport { barycenterBySurface } from './barycenter';\n\nexport default class ModeDraw implements Mode {\n  ctx: CanvasRenderingContext2D;\n  cnv: HTMLCanvasElement;\n  drawing = false;\n  color = 'lightblue';\n  lastPoint = { x: 0, y: 0 };\n  stickLengthSq = 0.5;\n  actRadiusSq = 60 * 60; // activation radius squared\n  path: Point[];\n  w: number;\n  h: number;\n\n  dragged = (e: PointerEvent): void => {\n    if (this.drawing && e.isPrimary) {\n      const d = distSq(this.lastPoint, { x: e.offsetX, y: e.offsetY });\n      if (d > this.stickLengthSq) {\n        this.lastPoint.x = e.offsetX;\n        this.lastPoint.y = e.offsetY;\n        this.path.push({ x: this.lastPoint.x, y: this.lastPoint.y });\n        this.draw();\n      }\n    }\n  };\n\n  pointedDown = (e: PointerEvent) => {\n    if (e.isPrimary) {\n      const d = distSq(this.lastPoint, { x: e.offsetX, y: e.offsetY });\n      if (d > this.actRadiusSq) {\n        this.path = [];\n        this.clear();\n      }\n      this.drawing = true;\n    }\n  };\n\n  pointedUp = () => {\n    this.drawing = false;\n\n    const iniPt = this.path[0];\n    const endPt = this.path[this.path.length - 1];\n    if (distSq(iniPt, endPt) < this.actRadiusSq) {\n      this.color = 'olive';\n      this.draw();\n      this.deactivate();\n    }\n  };\n\n  clear = () => {\n    this.path = [];\n    this.ctx.clearRect(0, 0, this.cnv.width, this.cnv.width);\n  };\n\n  draw = () => {\n    this.ctx.clearRect(0, 0, this.cnv.width, this.cnv.height);\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.path[0].x, this.path[0].y);\n    for (let i = 1; i < this.path.length; i++) {\n      this.ctx.lineTo(this.path[i].x, this.path[i].y);\n    }\n    this.ctx.strokeStyle = 'black';\n    this.ctx.lineWidth = 2;\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill('evenodd');\n    if (this.color === 'olive') this.ctx.closePath();\n    this.ctx.stroke();\n\n    //   const B = barycenter(path);\n    const B = barycenterBySurface(this.ctx).center;\n\n    this.ctx.beginPath();\n    this.ctx.arc(B.x, B.y, 5, 0, 2 * Math.PI, false);\n    this.ctx.fillStyle = 'red';\n    this.ctx.fill();\n    this.ctx.stroke();\n  };\n\n  constructor(ctx: CanvasRenderingContext2D, path: Point[]) {\n    this.ctx = ctx;\n    this.cnv = ctx.canvas;\n    this.path = path;\n    this.w = this.cnv.width;\n    this.h = this.cnv.height;\n  }\n\n  activate(): void {\n    this.path = [];\n    this.color = 'lightblue';\n    this.cnv.addEventListener('pointermove', this.dragged);\n    this.cnv.addEventListener('pointerdown', this.pointedDown);\n    this.cnv.addEventListener('pointerup', this.pointedUp);\n    this.cnv.addEventListener('pointerout', this.pointedUp);\n  }\n\n  deactivate(): void {\n    this.cnv.removeEventListener('pointermove', this.dragged);\n    this.cnv.removeEventListener('pointerdown', this.pointedDown);\n    this.cnv.removeEventListener('pointerup', this.pointedUp);\n    this.cnv.removeEventListener('pointerout', this.pointedUp);\n  }\n}\n","interface Point {\n  x: number;\n  y: number;\n}\n\nconst distSq = (ptA: Point, ptB: Point): number =>\n  (ptA.x - ptB.x) * (ptA.x - ptB.x) + (ptA.y - ptB.y) * (ptA.y - ptB.y);\n\nconst dist = (ptA: Point, ptB: Point): number => Math.sqrt(distSq(ptA, ptB));\n\n// Linear interpolation between x and y.\nconst lerp = (x: number, y: number, t: number) => (1 - t) * x + t * y;\n\nconst inverseLerp = (x: number, y: number, p: number) => {\n  if (Math.abs(y - x) !== 0) {\n    return Math.min(1, Math.max(0, Math.abs(p - x) / Math.abs(y - x)));\n  } else return 0;\n};\n\nconst slerp = (u: Point, v: Point, t: number) => {\n  const angle = Math.acos(u.x * v.x + u.y * v.y);\n\n  if (angle < 0.1) {\n    return u;\n  } else {\n    return {\n      x:\n        (Math.sin((1 - t) * angle) * u.x + Math.sin(t * angle) * v.x) /\n        Math.sin(angle),\n      y:\n        (Math.sin((1 - t) * angle) * u.y + Math.sin(t * angle) * v.y) /\n        Math.sin(angle),\n    };\n  }\n};\n\n// Clamps x between the values a and b.\nconst clamp = (x: number, a: number, b: number) =>\n  a <= b ? Math.min(Math.max(x, a), b) : Math.min(Math.max(x, b), a);\n\nexport { Point, lerp, inverseLerp, slerp, distSq, dist, clamp };\n","import { Layer, layerSetup } from './layer';\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\nfunction barycenterByBorder(P: Point[]): Point {\n  const N = P.length;\n  let SX = 0;\n  let SY = 0;\n  let SA = 0;\n  for (let i = 0; i < N; i++) {\n    SX +=\n      (P[i].x + P[(i + 1) % N].x) *\n      (P[i].x * P[(i + 1) % N].y - P[(i + 1) % N].x * P[i].y);\n    SY +=\n      (P[i].y + P[(i + 1) % N].y) *\n      (P[i].x * P[(i + 1) % N].y - P[(i + 1) % N].x * P[i].y);\n    SA += P[i].x * P[(i + 1) % N].y - P[(i + 1) % N].x * P[i].y;\n  }\n  const A = (1 / 2) * SA;\n  const Cx = (1 / (6 * A)) * SX;\n  const Cy = (1 / (6 * A)) * SY;\n\n  //   console.log(`barycenter: (${Cx},${Cy})`);\n  //   console.log(`area: ${A}`);\n  return { x: Cx, y: Cy };\n}\n\nfunction barycenterBySurface(ctx: CanvasRenderingContext2D): {\n  center: Point;\n  area: number;\n} {\n  //context: CanvasRenderingContext2D\n  const w = ctx.canvas.width;\n  const h = ctx.canvas.height;\n  const imgArray = ctx.getImageData(0, 0, w, h).data;\n\n  let SX = 0;\n  let SY = 0;\n  let N = 0;\n  for (let i = 0; i < w; i++) {\n    for (let j = 0; j < h; j++) {\n      if (imgArray[4 * (i + w * j) + 3] !== 0) {\n        SX += i;\n        SY += j;\n        N += 1;\n      }\n    }\n  }\n  const Cx = SX / N;\n  const Cy = SY / N;\n  //   console.log(`barycenterSurf: (${Cx},${Cy})`);\n  // console.log(`area: ${N}`);\n  return { center: { x: Cx, y: Cy }, area: N };\n}\n\nconst globalBarycenter = (layers: layerSetup[]): Point => {\n  const neLayers = layers.filter(\n    (d) => (d.layer?.path.data.length as number) > 1,\n  ); // non-empty layers\n\n  const totalArea = neLayers\n    .map((d) => d.layer?.area as number)\n    .reduce((acc, curr) => acc + curr, 0);\n\n  const X =\n    neLayers\n      .map((d) => (d.layer?.barycenter.x as number) * (d.layer?.area as number))\n      .reduce((acc, curr) => acc + curr, 0) / totalArea;\n\n  const Y =\n    neLayers\n      .map((d) => (d.layer?.barycenter.y as number) * (d.layer?.area as number))\n      .reduce((acc, curr) => acc + curr, 0) / totalArea;\n\n  return { x: X, y: Y };\n};\n\nconst drawGlobalBarycenter = (layers: layerSetup[], targetLayer: Layer) => {\n  const neLayers = layers.filter(\n    (d) => (d.layer?.path.data.length as number) > 1,\n  ); // non-empty layers\n\n  targetLayer.clear();\n\n  if (neLayers.length > 0) {\n    const C = globalBarycenter(neLayers);\n    targetLayer.barycenter = C;\n    targetLayer.drawBarycenter();\n  }\n};\n\nexport {\n  Point,\n  barycenterBySurface,\n  barycenterByBorder,\n  globalBarycenter,\n  drawGlobalBarycenter,\n};\n"],"names":["$a4c08666819fb319$exports","callback","document","Error","state","readyState","setTimeout","addEventListener","$aae5c5ac5df842ce$export$1717f45d0ace7417","ptA","ptB","x","y","$ea581e40972ccb3c$export$2e2bcd8739ae039","constructor","ctx","path","drawing","color","lastPoint","stickLengthSq","actRadiusSq","dragged","e","isPrimary","d","offsetX","offsetY","push","draw","pointedDown","clear","pointedUp","iniPt","endPt","length","deactivate","clearRect","cnv","width","height","beginPath","moveTo","i","lineTo","strokeStyle","lineWidth","fillStyle","fill","closePath","stroke","B","w","canvas","h","imgArray","getImageData","data","SX","SY","N","j","Cx","Cy","center","area","arc","Math","PI","activate","removeEventListener","$parcel$interopDefault","a","__esModule","default","drawApp","getElementById","getContext","willReadFrequently","console","log","mode","fullscreenElement","ww","screen","hh","max","min","requestFullscreen","then","orientation","lock","success","failure","catch","err","alert","message","name"],"version":3,"file":"index.9c3df253.js.map"}